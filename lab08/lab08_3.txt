a. The train_model() function adjusts the learning rate through the optimizer in the linear regressor.
b. Bucketing allows generalizations and patterns to be seen in the data since it simplifies the numeric values into
    the bucketized indices.
c. 1.
bucketized_latitude = tf.feature_column.bucketized_column(
    latitude, boundaries=get_quantile_based_boundaries(
      training_examples["latitude"], 10))
  bucketized_housing_median_age = tf.feature_column.bucketized_column(
    housing_median_age, boundaries=get_quantile_based_boundaries(
      training_examples["housing_median_age"], 7))
  bucketized_median_income = tf.feature_column.bucketized_column(
    median_income, boundaries=get_quantile_based_boundaries(
      training_examples["median_income"], 7))
  bucketized_rooms_per_person = tf.feature_column.bucketized_column(
    rooms_per_person, boundaries=get_quantile_based_boundaries(
      training_examples["rooms_per_person"], 7))

Yes, the task 1 bucketing made sense

    2.
    long_x_lat = tf.feature_column.crossed_column(
    set([bucketized_longitude, bucketized_latitude]), hash_bucket_size=1000)

    Adding a feature cross of longitude and latitude helps a little because it considers city blocks rather than longitude
    and latitude separately